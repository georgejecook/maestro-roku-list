import "pkg:/source/roku_modules/maestro/core/Utils.brs"
import "pkg:/source/roku_modules/log/LogMixin.brs"

function init()
  m.log = new log.Logger("CellProvider")
  m.top.observeField("_m", "onDebugMChange")
  reset()
end function

function onDebugMChange()
  m.top._m = m

end function

function reset(args = invalid)
  m.log.info("reset")
  m.cellTypes = {}
  m.top.numberOfCells = 0
  m.top.numberOfCellsInUse = 0
end function

function getTrackers(cellType)
  trackers = m.cellTypes[cellType]
  if trackers = invalid
    trackers = { usedCellsById: {}
      allCells: []
      freeCellsById: {}
      numberOfCellsInPool: 0
    }
    m.cellTypes[cellType] = trackers
  end if
  return trackers
end function

function getRopmPrefix(func, rootName)
  name = mc.getFunctionName(func)
  parts = name.split("_")
  if parts.count() > 1 and name.right(len(name) - len(parts[0])) = rootName
    return parts[0]
  end if
end function

function addPreBakedCells(number, cellType = invalid)
  m.log.info("adding ", number, cellType, "cells")
  trackers = getTrackers(cellType)

  for i = 0 to number
    cell = createObject("roSGNode", cellType)
    if cell <> invalid
      cell.id = str(trackers.numberOfCellsInPool).trim()
      trackers.numberOfCellsInPool++
      trackers.freeCellsById[cell.id] = cell
      trackers.allCells.push(cell)
      m.top.numberOfCells++
    else
      m.log.error("error creating cell with type", cellType)
    end if
  end for
  ' ? "finished making cells"
end function

function getCell(cellType = invalid)
  ? "asked for cell of "; cellType

  trackers = getTrackers(cellType)

  if trackers.freeCellsById.count() = 0
    m.log.warn("ran out of cells getting type :", cellType)

    if m.top.isCreateMoreEnabled
      m.log.warn("creating", m.top.numerOfCellsToCreateWhenDry, "more", cellType, "cells")
      for i = 0 to m.top.numerOfCellsToCreateWhenDry
        cell = createCell(cellType)
        trackers.freeCellsById[cell.id] = cell
        trackers.numberOfCellsInPool++
        trackers.allCells.push(cell)
      end for
      m.top.numberOfCells += m.top.numerOfCellsToCreateWhenDry
    else
      return invalid
    end if
  end if

  for each id in trackers.freeCellsById
    exit for
  end for

  cell = trackers.freeCellsById[id]
  trackers.freeCellsById.delete(id)
  trackers.usedCellsById[id] = cell
  m.top.numberOfCellsInUse++
  ? "returning cell with id"; id
  return cell
end function

function releaseCell(cell)
  if cell <> invalid
    ' ? "releasing cell "; cell.id
    trackers = getTrackers(cell.subType())
    trackers.usedCellsById.delete(cell.id)
    cell.getParent().removeChild(cell)
    trackers.freeCellsById[cell.id] = cell
    m.top.numberOfCellsInUse--
  end if
end function

function createCell(cellType)
  trackers = getTrackers(cellType)
  cell = createObject("roSGNode", cellType)
  cell.id = str(trackers.numberOfCellsInPool).trim()
  trackers.allCells.push(cell)
  trackers.freeCellsById[cell.id] = cell
  return cell
end function

function resetCells()
end function
