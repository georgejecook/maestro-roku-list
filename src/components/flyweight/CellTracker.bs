import "pkg:/source/roku_modules/log/LogMixin.brs"

function init()
  log.registerLogger("CellTracker")
  reset()
end function

function onDebugMChange()
  m.top._m = m
end function

function reset(args = invalid)
  m.logInfo("resetting cell trackers")
  m.trackers = {}
  m.top.numberOfCells = 0
  m.top.numberOfCellsInUse = 0

end function

function getTrackers(scope = "all")
  trackers = m.trackers[scope]
  if trackers = invalid
    trackers = { 
      contentIdsByCellId: {}
      viewStatesByContentId: {}
      cellIdsByContentId: {}
      cellsById: {}
    }
    m.trackers[scope] = trackers 
  end if
  return trackers
end function

function getCell(cellId, scope = "all")
  trackers = getTrackers(scope)

  return trackers.cellsById[cellId]
end function

function getCellForContentId(id, scope = "all")
  trackers = getTrackers(scope)
  cellId = trackers.cellIdsByContentId[id]

  if cellId <> invalid
    return trackers.cellsById[cellId]
  else
    return invalid
  end if
end function

function bindCellToContent(cell, content, scope = "all")

  trackers = getTrackers(scope)

  if cell.trackingId = ""
    ' ? ">>cell has never been bound"
    'never been bound
    m.top.trackingId++
    m.top.numberOfCells++
    cell.trackingId = str(m.top.trackingId).trim()
  else
    existingId = trackers.contentIdsByCellId[cell.trackingId]
    if existingId <> invalid
      if content <> invalid and existingId = content.id
        m.logDebug("bound to same thing; ignoring")
        'we are bound to the same thing
        return invalid
      else
        'unbind it from what it was bound to
        unbindCell(cell)
      end if
    end if

  end if

  if content <> invalid
    m.top.numberOfCellsInUse++
    ' ? ">> binding content id "; content.id ; " to "; cell.trackingId
    trackers.cellIdsByContentId[content.id] = cell.trackingId
    trackers.contentIdsByCellId[cell.trackingId] = content.id
  end if

  trackers.cellsById[cell.trackingId] = cell
end function

function unbindCell(cell, scope = "all")
  trackers = getTrackers(scope)
  contentId = trackers.contentIdsByCellId[cell.trackingId]

  if contentId <> invalid
    trackers.contentIdsByCellId.delete(cell.trackingId)
    existingCellId = trackers.cellIdsByContentId[contentId]

    if existingCellId <> invalid and existingCellId = cell.trackingId
      m.top.numberOfCellsInUse--
      trackers.cellIdsByContentId.delete(contentId)
      trackers.cellsById.delete(cell.trackingId)
    end if
  end if
end function

function setViewStates(states, scope = "all")

  trackers = getTrackers(scope)

  for each id in states
    dynamicCell = getCellForContentId(id)
    trackers.viewStatesByContentId[id] = states[id]
    if dynamicCell <> invalid
      dynamicCell.viewState = states[id]
      ' ? " setting cell view state"; id ; states[id]
    else
      'FIXME
      ' ? " could not find cell for id " ; id
    end if
  end for

end function

function getStateForContentId(id, scope = "all")
  trackers = getTrackers(scope)
  return trackers.viewStatesByContentId[id]
end function