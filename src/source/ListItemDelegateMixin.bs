namespace listItemDelegateMixin

  ' /**
  '  * @member setDelegate
  '  * @memberof module:ListItemDelegateMixin
  '  * @instance
  '  * @function
  '  * @description wires up a cell, or row (or some other list item) to method handlers for the delegate events it may receive. This should be used to add listeners to a cell, or a row renderer. You are free to just simply use the events, that come in onlistEventMap, as well.
  '  * @param {class} instance - target for the delegate; if invalid, then it will default to the methods on node scope
  '  * @returns {returnType} returnDescription
  '  */
  function setDelegate(instance = invalid)
    m.listEventMap = {}

    if instance <> invalid
      funcMap = {
        "onWillEnter": "willEnter"
        "onWillExit": "willExit"
        "onDidEnter": "didEnter"
        "onDidExit": "didExit"
        "onWillGainFocus": "willGainFocus"
        "onWillLoseFocus": "willLoseFocus"
        "onDidGainFocus": "didGainFocus"
        "onDidLoseFocus": "didLoseFocus"
        "onGainingFocus": "gainingFocus"
        "onLosingFocus": "losingFocus"
      }

      for each eventName in funcMap
        if mc_isFunction(instance[eventName])
          m.listEventMap[funcMap[eventName]] = true
        end if
      end for
    else
      'no way to get a function pointer by name :(
      if mc_isFunction(onWillEnter)
        m.listEventMap["willEnter"] = true
      end if
      if mc_isFunction(onWillExit)
        m.listEventMap["willExit"] = true
      end if
      if mc_isFunction(onDidEnter)
        m.listEventMap["didEnter"] = true
      end if
      if mc_isFunction(onDidExit)
        m.listEventMap["didExit"] = true
      end if
      if mc_isFunction(onWillGainFocus)
        m.listEventMap["willGainFocus"] = true
      end if
      if mc_isFunction(onWillLoseFocus)
        m.listEventMap["willLoseFocus"] = true
      end if
      if mc_isFunction(onDidGainFocus)
        m.listEventMap["didGainFocus"] = true
      end if
      if mc_isFunction(onDidLoseFocus)
        m.listEventMap["didLoseFocus"] = true
      end if
      if mc_isFunction(onGainingFocus)
        m.listEventMap["gainingFocus"] = true
      end if
      if mc_isFunction(onLosingFocus)
        m.listEventMap["losingFocus"] = true
      end if
    end if

    m.isObservingListEvents = m.listEventMap.count() > 0

    if m.isObservingListEvents
      m.listEventInstance = instance
      mc_toggleObserver(m.top, "listEvent", mc_getFunctionName(onListEventBridge))
    end if
  end function

  function onListEventBridge(sgEvent) as void
    event = sgEvent.getData()
    eventName = event.name
    ' ? eventName
    if not m.isObservingListEvents or m.listEventMap[eventName] <> true
      ' ? "LE(skipped) " ; eventName ; " " ; event.direction ; " I " ; "" ; event.index ; " " ; event.fraction
      return
    end if
    ' ? "onListEventBridge OBSERVED " ; eventName

    'lament: not being able to get functions in the node scope is such a bummer
    if eventName = "willEnter"
      if m.listEventInstance <> invalid
        m.listEventInstance.onWillEnter(event.index, event.direction)
      else
        'bs:disable-next-line
        onWillEnter(event.index, event.direction)
      end if
    else if eventName = "willExit"
      if m.listEventInstance <> invalid
        m.listEventInstance.onWillExit(event.index, event.direction)
      else
        'bs:disable-next-line
        onWillExit(event.index, event.direction)
      end if

    else if eventName = "didEnter"
      if m.listEventInstance <> invalid
        m.listEventInstance.onDidEnter(event.index, event.direction)
      else
        'bs:disable-next-line
        onDidEnter(event.index, event.direction)
      end if

    else if eventName = "didExit"
      if m.listEventInstance <> invalid
        m.listEventInstance.onDidExit(event.index, event.direction)
      else
        'bs:disable-next-line
        onDidExit(event.index, event.direction)
      end if

    else if eventName = "willGainFocus"
      if m.listEventInstance <> invalid
        m.listEventInstance.onWillGainFocus(event.index, event.direction)
      else
        'bs:disable-next-line
        onWillGainFocus(event.index, event.direction)
      end if

    else if eventName = "willLoseFocus"
      if m.listEventInstance <> invalid
        m.listEventInstance.onWillLoseFocus(event.index, event.direction)
      else
        'bs:disable-next-line
        onWillLoseFocus(event.index, event.direction)
      end if

    else if eventName = "didGainFocus"
      if m.listEventInstance <> invalid
        m.listEventInstance.onDidGainFocus(event.index, event.direction)
      else
        'bs:disable-next-line
        onDidGainFocus(event.index, event.direction)
      end if

    else if eventName = "didLoseFocus"
      if m.listEventInstance <> invalid
        m.listEventInstance.onDidLoseFocus(event.index, event.direction)
      else
        'bs:disable-next-line
        onDidLoseFocus(event.index, event.direction)
      end if

    else if eventName = "gainingFocus"
      if m.listEventInstance <> invalid
        m.listEventInstance.onGainingFocus(event.index, event.direction, event.fraction)
      else
        'bs:disable-next-line
        onGainingFocus(event.index, event.direction, event.fraction)
      end if

    else if eventName = "losingFocus"
      if m.listEventInstance <> invalid
        m.listEventInstance.onLosingFocus(event.index, event.direction, event.fraction)
      else
        'bs:disable-next-line
        onLosingFocus(event.index, event.direction, event.fraction)
      end if

    end if

  end function

end namespace