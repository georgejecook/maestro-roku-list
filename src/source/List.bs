import "pkg:/source/ListItemScroller.bs"
import "pkg:/source/ListItemViewManager.bs"
import "pkg:/source/ItemFocusManager.bs"
import "pkg:/source/roku_modules/maestro/core/Tasks.brs"
import "pkg:/source/ListMixin.bs"
import "pkg:/source/roku_modules/maestro/view/BaseView.brs"

namespace ml
  @node("ml_List", "mv_BaseView")
  class List extends mv.BaseView

    @observer("onContentChange")
    public content as mc.types.Node
    private _lastContent

    public isScrolling = false
    public width = 1920
    public height = 1080
    'indicates what to set a row to when it's considered hidden (hidden|partial)
    public rowHidingMode = "hidden"
    @observer("onAnimateToRowChange")
    public animateToRow = -1
    public focusedRowIndex = -1
    public focusedCellIndex = -1
    @observer("onFocusedRowPercentChange")
    public focusedRowPercent = 0.0
    public focusedCellPercent = 0.0
    @observer("onNextFocusIndexChange")
    public nextFocusIndex as mc.types.Array
    public cellEvents as mc.types.Node
    public rowEvents as mc.types.Node
    public listEvent as mc.types.Assocarray

    public rowFocused = -1
    public itemFocused = -1
    public itemUnfocused = -1
    public itemSelected = -1
    public currFocusItemIndex = -1
    public _focusedRenderer as mc.types.Node

    'managers and state
    private viewManager
    private focusManager
    private itemScroller
    private sourceFocusRect
    private targetFocusRect
    private isInitialized = false

    'views
    private focusTimer
    private contentGroup
    private rowsGroup
    private focusPoint
    private focusIndicator

    function new()
      super("mv_List")
    end function

    protected override function initialize()
      super.initialize()
      m.createViews()
      m.initManagers()
      m.isInitialized = true
      m.onContentChange()
    end function

    private function createViews()
      m.focusTimer = m.createSGNode("Timer", m.top, "focusTimer", {
        duration: 0.01
        control: "start"
        repeat: true
      })
      m.contentGroup = m.createSGNode("Group", m.top, "contentGroup")
      m.rowsGroup = m.createSGNode("Group", m.top, "rowsGroup")
      m.focusPoint = m.createSGNode("mv_Rectangle", m.top, "focusPoint")
      m.focusIndicator = m.createSGNode("mv_Rectangle", m.top, "focusIndicator", {
        color: "#ff0000"
        visible: true
        opacity: 0.5
      })
    end function

    private function initManagers()
      m.cellEvents = m.createEventsBroker("cells")
      m.rowEvents = m.createEventsBroker("rows")
      m.rowsGroup = m.top.findNode("rowsGroup")

      m.viewManager = new ml.ListItemViewManager(m.top, m.rowsGroup, 0, m.height)
      m.itemScroller = new ml.ListItemScroller(m.viewManager)
      m.focusManager = new ml.ItemFocusManager(m.viewManager, m.itemScroller, m.rowEvents)
      m.focusManager.name = "LIST FM "
      ' m.clippingRect = [0,0,1920,550]
      m.focusIndicator = m.top.findNode("focusIndicator")
      m.content = invalid
    end function

    private function createEventsBroker(id)
      node = createObject("roSGNode", "Node")
      node.id = id
      node.addFields({ "listEvent": {}, "viewportEvents": [] })
      return node
    end function

    private function resetState()
      m.log.info("resetState")
      m.viewManager.setContent(m.content)
      m.itemScroller.reset()
      m.top.clippingrect = [0, 0, m.width, m.height]
    end function

    private function onContentChange()
      m.log.info("onContentChange")
      if m.isInitialized and (m._lastContent = invalid or not m._lastContent.isSameNode(m.content))
        m._lastContent = m.content
        m.resetState()
      end if
    end function

    private function onAnimateToRowChange()
      if m.content <> invalid
        m.itemScroller.moveToIndex(m.animateToRow)
      end if
    end function

    public function forceUpdate()
      m.viewManager.forceUpdateLayout()
      m.viewManager.updateRenderedComponents(m.itemScroller.direction, m.itemScroller.index, true)

      'TODO - need to ensure that the current focus and scroll position is valid after an update!
      m.itemScroller.move(0)
    end function

    public function getRowRenderer(index)
      return m.viewManager.getRenderer(index)
    end function

    public function getCellRenderer(rowIndex, cellIndex)
      row = m.getRowRenderer(rowIndex)

      if row <> invalid
        return row@.getRenderer(cellIndex)
      end if

      return invalid
    end function

    public function getCellScreenRect(rowIndex, cellIndex, rowScreenPos = invalid, cellScreenPos = invalid)
      ' ? "+++ rowScreenPos"; rowScreenPos
      rowScreenRect = m.getRowScreenRect(rowIndex, rowScreenPos)

      if rowScreenRect <> invalid
        row = m.getRowRenderer(rowIndex)

        if row <> invalid
          cellScreenRect = row@.getScreenRect(cellIndex, screenPos)

          if cellScreenRect <> invalid
            cellScreenRect.screenPos += rowScreenRect.screenPos
            cellScreenRect.translation[1] += rowScreenRect.screenPos
            return cellScreenRect
          end if
        end if
      end if

      return invalid
    end function

    private function getRowScreenRect(rowIndex, screenPos = invalid, direction = 0)
      return m.viewManager.getScreenRect(rowIndex, screenPos, direction)
    end function

    private function onNextFocusIndexChange() as void
      'TODO
      return
      m.sourceFocusRect = {
        translation: m.focusIndicator.translation
        size: [m.focusIndicator.width, m.focusIndicator.height]
      }
      m.targetFocusRect = m.getCellScreenRect(m.nextFocusIndex[0], m.nextFocusIndex[1])
      ? " onNextFocusIndexChange SOURCE " ; m.sourceFocusRect
      ? " onNextFocusIndexChange TARGET " ; m.targetFocusRect
    end function

    private function onFocusedRowPercentChange(fraction) as void
      if m.sourceFocusRect = invalid or m.targetFocusRect = invalid
        ? "NO FOCUS RECTS! Ensure m.nextFocusIndex was set!"
        return
      end if

      translation = m.interpolate(m.sourceFocusRect.translation, m.targetFocusRect.translation, fraction)
      size = m.interpolate(m.sourceFocusRect.size, m.targetFocusRect.size, fraction)
      ' ? "translation " ; translation
      ' ? "size " ; size
      m.focusIndicator.translation = translation
      m.focusIndicator.width = size[0]
      m.focusIndicator.height = size[1]
      ' ? "onFocusedRowPercentChange " ; fraction ; " " ; translation[1]; " " ; m.targetFocusRect.translation[1]
    end function

    private function interpolate(a, b, fraction)
      if a <> invalid and b <> invalid
        return [a[0] + (b[0] - a[0]) * fraction, a[1] + (b[1] - a[1]) * fraction]
      else
        return [0, 0]
      end if
    end function
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ KeyPress
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onKeyPressUp() as boolean
      m.log.method("onKeyPressUp")
      if m.itemScroller.index > -1
        return m.itemScroller.move(-1)
      else
        return false
      end if
    end function

    private function onKeyPressDown() as boolean
      m.log.method("onKeyPressDown")
      if m.itemScroller.index < m.viewManager.numberOfItems
        return m.itemScroller.move(1)
      else
        return false
      end if
    end function

    private function getLongPressIntervalForKey(key) as float
      m.log.method("getLongPressIntervalForKey", key)
      if (key = "up" and m.itemScroller.index > 0) or (key = "down" and m.itemScroller.index < m.viewManager.numberOfItems)
        return 0.2
      else
        return 0
      end if
    end function

    private function onLongPressStart(key) as boolean
      m.log.method(">>>>onLongPressStart", key)

      if (key = "up" and m.itemScroller.index > 0) or (key = "down" and m.itemScroller.index < m.viewManager.numberOfItems)
        if key = "up"
          m.log.verbose("long press started on key", key, "going to animate to start of list")
          return m.itemScroller.moveToEnd(-1)
        else
          m.log.verbose("long press started on key", key, "going to animate to end of list")
          return m.itemScroller.moveToEnd(1)
        end if
      end if

      return false
    end function

    private function onLongPressFinish(key) as boolean
      if key = "up" or key = "down"
        m.log.verbose("long press finished on key", key, "going to animate to final scroll position")
        m.itemScroller.finishAnimating()
        return true
      end if

      return false
    end function
  end class
end namespace