import "pkg:/source/ListMixin.bs"
import "pkg:/source/ItemDelegateMixin.bs"
import "pkg:/source/RowItemScroller.bs"
import "pkg:/source/RowItemViewManager.bs"
import "pkg:/source/ItemFocusManager.bs"
import "pkg:/source/roku_modules/maestro/view/BaseView.brs"

namespace ml
  @node("ml_HorizontalRow", "mv_BaseView")
  class HorizontalRow extends mv.BaseView

    'public fields
    @observer("onContentChange")
    public content as mc.types.Node
    private _currentContent
    public index = -1
    public owner as mc.types.Node
    @observer("onListEvent")
    public listEvent as mc.types.Assocarray
    public renderState = "none"
    @observer("onIsRenderedChange")
    public isRendered = false
    public isInViewport = false
    @observer("onAnimateToItemChange")
    public animateToItem = -1
    public focusedCellIndex = 0
    public focusedCellPercent = 0.0
    ' @observer("onIsScrollingChange")
    public isScrolling = false
    public height = 0
    public width = 0

    'managers and state
    private viewManager
    private focusManager
    private itemScroller
    private isInitialized = false
    private wasHidden = false
    private wasFocusable = true
    private currentHeaderType = invalid
    'debug
    public _vs = "none"
    private settings

    'views
    private backgroundGroup
    private cellsGroup
    private contentGroup
    private foregroundGroup
    private header

    'util
    private componentPool = m.global.componentPool
    private cellTracker = m.global.cellTracker

    function new()
      super("ml_HorizontalRow")
      ml.itemDelegateMixin.setDelegate()
    end function

    protected override function initialize()
      super.initialize()
      m.createViews()
      m.createManagers()
      m.isInitialized = true
      m.onContentChange()
    end function

    private function createViews()
      m.backgroundGroup = m.createSGNode("Group", m.top, "backgroundGroup")
      m.contentGroup = m.createSGNode("Group", m.top, "contentGroup")
      m.cellsGroup = m.createSGNode("Group", m.contentGroup, "cellsGroup")
      m.foregroundGroup = m.createSGNode("Group", m.top, "foregroundGroup")
    end function

    private function createManagers()
      m.log.info("createManagers")
      m.viewManager = new ml.RowItemViewManager(m.owner, m.top, m.cellsGroup, m.componentPool, m.cellTracker, 0, m.width)
      m.itemScroller = new ml.RowItemScroller(m.viewManager)
      m.focusManager = new ml.ItemFocusManager(m.viewManager, m.itemScroller, m.owner.cellEvents, m.index)
      m.focusManager.name = "ROW FM "
      m.focusManager.isRow = true
    end function

    private function onContentChange()
      m.log.info("onContentChange")
      if m.isInitialized
        if m._currentContent = invalid or not m._currentContent.isSameNode(m.content)
          m._currentContent = m.content
          m.settings = ml.listMixin.getRowSettings(m.owner.content, m.content)

          m.configureHeader()
          m.calculateHeight()
          m.createManagers()
          m.viewManager.setContent(m.content)
          m.focusManager.isNotifying = false
          m.itemScroller.reset()
          m.focusManager.isNotifying = true
        else if m._currentContent <> invalid
          isListRefreshNeeded = false
          if m.wasHidden <> m._currentContent.isHidden
            m.wasHidden = m._currentContent.isHidden
            isListRefreshNeeded = true
          end if
          if m.wasFocusable <> m._currentContent.isFocusEnabled
            m.wasFocusable = m._currentContent.isFocusEnabled
            isListRefreshNeeded = true
          end if

          if isListRefreshNeeded
            m.owner@.forceUpdate()
          end if
        end if

      end if
    end function

    private function configureHeader()
      if m._currentContent = invalid
        m.cleanHeader()
      else
        headerSettings = m.settings.headerSettings
        if m.currentHeaderType = invalid or m.currentHeaderType <> headerSettings.compName
          m.cleanHeader()
          if headerSettings.position = "onTop"
            m.header = m.createSGNode(headerSettings.compName, m.foregroundGroup, "header")
          else if headerSettings.position = "underneath"
            m.header = m.createSGNode(headerSettings.compName, m.backgroundGroup, "header")
          end if
        end if

        if m.header <> invalid
          m.header.translation = [- m.settings.contentOffset[0], 0] 'cancel out this row's offset
          m.header.width = m.width
          m.header.height = headerSettings.height
          m.header@.setContent(m._currentContent, headerSettings)
          m.contentGroup.translation = [0, headerSettings.height]
        else
          m.contentGroup.translation = [0, 0]
        end if
      end if
    end function

    private function cleanHeader()
      if m.currentHeaderType <> invalid
        m.currentHeaderType = invalid
        m.header.getParent().removeChild(m.header)
        m.header = invalid
      end if
    end function

    private function calculateHeight()
      if m.settings.height <> -1
        height = m.settings.height
      else
        height = m.settings.cellSettings.size[1]
      end if

      if m.header <> invalid
        height += m.settings.headerSettings.height
      end if
      m.height = height
    end function

    private function onIsRenderedChange()
      if m.viewManager <> invalid
        m.viewManager.updateRenderedComponents(m.itemScroller.direction, m.itemScroller.index)
      end if
    end function

    private function onListEvent(event as object)
      if event.name = "willEnter" or event.name = "didEnter"
        for each component in m.cellsGroup.getChildren(-1, 0)
          if component.doesExist("listEvent")
            component.listEvent = event
          end if
        end for
      end if
    end function

    private function onAnimateToItemChange()
      if m.content <> invalid
        m.itemScroller.moveToIndex(m.animateToItem)
      end if
    end function

    public function getRenderer(index as integer)
      return m.viewManager.getRenderer(index)
    end function

    public function getRect(index as integer, useScreenCoords = false as boolean)
      return m.viewManager.getRect(index, useScreenCoords)
    end function

    public function getScreenRect(index as integer, screenPos = invalid as integer, direction = 0 as integer)
      rect = m.viewManager.getScreenRect(index, screenPos, direction)
      if rect <> invalid
        rect.translation[1] += m.contentGroup.translation[1]
      end if
      return rect
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ KeyPress
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onKeyPressLeft() as boolean
      m.log.verbose("onKeyPressLeft")
      m.itemScroller.move(-1)
      return true
    end function

    private function onKeyPressRight() as boolean
      m.log.verbose("onKeyPressRight")
      m.itemScroller.move(1)
      return true
    end function

    private function getLongPressIntervalForKey(key as string) as float
      m.log.verbose("getLongPressIntervalForKey", key)
      if key = "left" or key = "right"
        return 0.2
      else
        return 0
      end if
    end function

    private function onLongPressStart(key as string) as boolean
      m.log.verbose(">>>>onLongPressStart", key)

      if key = "left" or key = "right"
        m.log.verbose("long press finished on key", key, "going to animate to final scroll position")
        if key = "left"
          m.itemScroller.moveToEnd(-1)
        else
          m.itemScroller.moveToEnd(1)
        end if

        return true
      end if

      return false
    end function

    private function onLongPressFinish(key as string) as boolean
      if key = "left" or key = "right"
        m.log.verbose("long press finished on key", key, "going to animate to final scroll position")
        m.itemScroller.finishAnimating()
        return true
      end if

      return false
    end function

  end class
end namespace