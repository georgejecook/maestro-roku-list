import "pkg:/source/ListMixin.bs"
import "pkg:/source/ItemDelegateMixin.bs"
import "pkg:/source/RowItemScroller.bs"
import "pkg:/source/RowItemViewManager.bs"
import "pkg:/source/ItemFocusManager.bs"
import "pkg:/source/roku_modules/maestro/view/BaseView.brs"

namespace ml
  @node("ml_HorizontalRow", "mv_BaseView")
  class HorizontalRow extends mv.BaseView

    'public fields
    @observer("onContentChange")
    public content as mc.types.Node
    private _lastContent
    public index = -1
    public owner as mc.types.Node
    @observer("onListEvent")
    public listEvent as mc.types.Assocarray
    public renderState = "none"
    @observer("onIsRenderedChange")
    public isRendered = false
    public isInViewport = false
    @observer("onAnimateToItemChange")
    public animateToItem = -1
    public isHidden = false
    public focusedCellIndex = 0
    public focusedCellPercent = 0.0
    @observer("onIsScrollingChange")
    public isScrolling = false
    public height = 0
    public width = 0

    'managers and state
    private viewManager
    private focusManager
    private itemScroller
    private isInitialized = false

    'debug
    public _vs = "none"

    'views
    private bgRect
    private contentGroup
    private cellsGroup
    private header

    'util
    private componentPool = m.global.componentPool
    private cellTracker = m.global.cellTracker

    function new()
      super("ml_HorizontalRow")
      ml.itemDelegateMixin.setDelegate()
    end function

    protected override function initialize()
      super.initialize()
      m.createViews()
      m.createManagers()
      m.isInitialized = true
      m.onContentChange()
    end function

    private function createViews()
      m.bgRect = m.createSGNode("mv_Rectangle", m.top, "bgRect", {
        width: 0
        color: "#000000"
        opacity: 0
        height: 0
      })
      m.contentGroup = m.createSGNode("Group", m.top, "contentGroup")
      m.cellsGroup = m.createSGNode("Group", m.top, "cellsGroup")
      m.header = m.createSGNode("mv_Label", m.top, "header", {
        text: "header"
        color: "#ffffff"
      })
    end function

    private function createManagers()
      m.log.info("createManagers")
      m.viewManager = new ml.RowItemViewManager(m.owner, m.top, m.cellsGroup, m.componentPool, m.cellTracker, 0, m.width)
      m.itemScroller = new ml.RowItemScroller(m.viewManager)
      m.focusManager = new ml.ItemFocusManager(m.viewManager, m.itemScroller, m.owner.cellEvents, m.index)
      m.focusManager.name = "ROW FM "
      m.focusManager.isRow = true
    end function

    private function onContentChange()
      m.log.info("onContentChange")
      if m.isInitialized and (m._lastContent = invalid or not m._lastContent.isSameNode(m.content))
        m._lastContent = m.content
        if m.content <> invalid
          'configure header here
          m.header.text = "ROW " + m.content.title
        end if
        m.calculateHeight()
        m.createManagers()
        m.viewManager.setContent(m.content)
        m.focusManager.isNotifying = false
        m.itemScroller.reset()
        m.focusManager.isNotifying = true
      end if
    end function

    private function calculateHeight()
      settings = ml.listMixin.getRowSettings(m.owner.content, m.content)
      if settings.height <> -1
        m.height = settings.height
      else
        m.height = settings.cellSettings.size[1] + settings.contentOffset[1]
      end if
      m.bgRect.size = [m.owner.width, m.height]
    end function

    private function onIsRenderedChange()
      ' ? "onIsRenderedChange " ; m.isRendered
      if m.viewManager <> invalid
        m.viewManager.updateRenderedComponents(m.itemScroller.direction, m.itemScroller.index)
      end if
    end function

    private function onIsScrollingChange()
      if m.viewManager <> invalid
        m.viewManager.setIsScrolling(m.isScrolling)
      end if
    end function

    private function onListEvent(event)
      if event.name = "willEnter" or event.name = "didEnter"
        for each component in m.cellsGroup.getChildren(-1, 0)
          if component.doesExist("listEvent")
            component.listEvent = event
          end if
        end for
      end if
    end function

    private function onAnimateToItemChange()
      if m.content <> invalid
        m.itemScroller.moveToIndex(m.animateToItem)
      end if
    end function

    public function getRenderer(index)
      return m.viewManager.getRenderer(index)
    end function

    public function getRect(index, useScreenCoords = false)
      return m.viewManager.getRect(index, useScreenCoords)
    end function

    public function getScreenRect(index, screenPos = invalid, direction = 0)
      return m.viewManager.getScreenRect(index, screenPos, direction)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ KeyPress
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onKeyPressLeft() as boolean
      m.log.verbose("onKeyPressLeft")
      m.itemScroller.move(-1)
      return true
    end function

    private function onKeyPressRight() as boolean
      m.log.verbose("onKeyPressRight")
      m.itemScroller.move(1)
      return true
    end function

    private function getLongPressIntervalForKey(key) as float
      m.log.verbose("getLongPressIntervalForKey", key)
      if key = "left" or key = "right"
        return 0.2
      else
        return 0
      end if
    end function

    private function onLongPressStart(key) as boolean
      m.log.verbose(">>>>onLongPressStart", key)

      if key = "left" or key = "right"
        m.log.verbose("long press finished on key", key, "going to animate to final scroll position")
        if key = "left"
          m.itemScroller.moveToEnd(-1)
        else
          m.itemScroller.moveToEnd(1)
        end if

        return true
      end if

      return false
    end function

    private function onLongPressFinish(key) as boolean
      if key = "left" or key = "right"
        m.log.verbose("long press finished on key", key, "going to animate to final scroll position")
        m.itemScroller.finishAnimating()
        return true
      end if

      return false
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ delegate
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  end class
end namespace