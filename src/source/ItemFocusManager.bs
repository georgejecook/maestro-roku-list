import "pkg:/source/roku_modules/maestro/core/BaseClass.brs"
import "pkg:/source/roku_modules/maestro/view/Animation.brs"

namespace ml
  @strict
  class ItemFocusManager extends mc.BaseClass

    public viewManager = invalid
    public itemScroller = invalid
    public nextComponent = invalid
    public component = invalid
    public index = 0
    public indexPosition = 0
    public nextIndex = 0
    public nextPosition = 0
    public direction = 0
    public didStart = false
    public didFinish = false
    public isRow = false

    private container
    private moveAnimation
    private rowIndex
    private delegates

    function new(viewManager, scroller, ownerDelegate = invalid, rowIndex = -1)
      super("ItemFocusManager")
      m.rowIndex = rowIndex
      m.viewManager = viewManager
      m.itemScroller = scroller
      m.itemScroller.focusManager = m
      m.container = viewManager.container
      m.moveAnimation = scroller.moveAnimation
      m.delegates = [viewManager.owner]

      if ownerDelegate <> invalid
        m.delegates.push(ownerDelegate)
      else
        m.log.error("There was no delegate passed to this focus manager - events wont be handled")
      end if
      owner = viewManager.owner
      if owner.delegate <> invalid
        m.delegates.push(owner.delegate)
      end if

    end function

    function setFocusPosition(index, indexPosition, nextIndex, nextPosition, direction)
      ? ">>>>>>>>>>>>>>>>>>>>>"
      m.log.info(index, indexPosition, nextIndex, nextPosition, direction)
      ? ">>>>>>>>>>>>>>>>>>>>>"
      m.index = index
      m.indexPosition = indexPosition
      m.nextIndex = nextIndex
      m.nextPosition = nextPosition
      m.direction = direction
      m.component = m.viewManager.getRenderer(m.index)
      m.nextComponent = m.viewManager.getRenderer(m.nextIndex)
      m.didStart = false
      m.didFinish = false
      m.onFocusUpdate(0)
    end function

    function onFocusAnimationUpdate(fraction) as void
      if m.didStart and not m.didFinish
        ' ? "FOCUS ANIM UPDATE "; fraction
        m.onFocusUpdate(fraction)
      end if
    end function

    function onContainerPositionChange(offset)
      distance = abs(m.nextPosition - m.indexPosition)
      currentPos = abs(m.indexPosition - offset)
      ? ">>>>>> I:" ; m.index ; " NI:"; m.nextIndex
      ? "offset:" ; offset ; " IP:" ; m.indexPosition ; " D:" ; distance ; " C:" ; currentPos ; " DIR:"; m.direction
      if distance <> 0
        fraction = currentPos / distance
        ' if m.direction = -1
        '   if fraction > 0
        '     fraction = 1 - fraction
        '   end if
        ' end if
      else
        fraction = 0
      end if

      ? m.name + " UPDATE: " ; fraction
      m.onFocusUpdate(fraction)
    end function

    function onFocusUpdate(fraction) as void
      if not m.didStart
        ? "DID START"
        name = "willLoseFocus"
        nextName = "willGainFocus"
        m.didStart = true
        m.setOwnerNextFocusIndex()
      else if fraction = 0
        ? "FRACTION 0"
        return
      else if fraction = 1
        ? "FRACTION 1"
        ? ""
        if m.didFinish
          return
        end if
        ? "SETTING INDEXES"
        m.didFinish = true
        name = "didLoseFocus"
        nextName = "didGainFocus"
        m.setOwnerIndexes()
      else
        name = "losingFocus"
        nextName = "gainingFocus"
      end if

      if m.isRow
        m.viewManager.owner.focusedCellPercent = fraction
      else
        m.viewManager.owner.focusedRowPercent = fraction
      end if

      m.sendEvents(name, nextName, fraction)
    end function

    function sendEvents(name, nextName, fraction)
      event = {
        direction: m.direction
        fraction: fraction
        name: name
        index: m.index
      }
      nextEvent = {
        direction: m.direction
        fraction: fraction
        name: nextName
        index: m.nextIndex
      }

      event.rowIndex = m.rowIndex
      nextEvent.rowIndex = m.rowIndex

      'let components know, so they can react
      if m.component <> invalid
        m.component.listEvent = event
      end if

      if m.nextComponent <> invalid
        m.nextComponent.listEvent = nextEvent
      end if

      for each delegate in m.delegates
        delegate.listEvent = event
        delegate.listEvent = nextEvent
      end for
    end function

    function setOwnerNextFocusIndex()
      if m.isRow
        m.viewManager.owner.nextFocusIndex = [m.viewManager.row.index, m.nextIndex]
      else
        comp = m.viewManager.getRenderer(m.nextIndex)
        if comp <> invalid
          m.viewManager.owner.nextFocusIndex = [comp.index, comp.focusedCellIndex]
        end if
      end if

    end function

    function setOwnerIndexes()
      if m.isRow
        ? "setting ROW focused index to cell" ; m.nextIndex
        m.viewManager.owner.focusedCellIndex = m.nextIndex
      else
        ? "setting LIST row index to" ; m.nextIndex
        m.viewManager.owner.focusedRowIndex = m.nextIndex
        comp = m.viewManager.getRenderer(m.nextIndex)
        if comp <> invalid
          ? "setting LIST CELL index " ; comp.focusedCellIndex
          m.viewManager.owner.focusedCellIndex = comp.focusedCellIndex
        end if
      end if

    end function

  end class
end namespace