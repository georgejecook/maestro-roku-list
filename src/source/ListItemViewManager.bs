import "pkg:/source/ItemViewManager.bs"
import "pkg:/source/ListMixin.bs"

namespace ml
  class ListItemViewManager extends ml.ItemViewManager

    function new(list, container, minPos = 0, maxPos = 1080)
      super("ListItemViewManager", list, container, 1, minPos, maxPos)
      m.delegate = list.rowEvents
      m.lookAheadDistance = maxPos * 5
      m.lookBehindDistance = maxPos * 2
    end function

    override function getRenderer(index)
      return m.components[index]
    end function

    override function createRenderers(content)

      'TODO remove/recycle views

      y = 0
      w = m.owner.width

      if content <> invalid
        index = 0
        for each rowContent in content.getChildren(-1, 0)
          settings = ml.listMixin.getRowSettings(m.content, rowContent)

          comp = m.createRow(rowContent, index, settings)
          if comp <> invalid
            comp.index = index
            comp.renderState = "none"

            m.components.push(comp)
          else
            m.log.error("could not create row for index ")
          end if
          index++
        end for
      end if
    end function

    function createRow(rowContent, index, settings)
      compName = rowContent.rowCompName <> invalid ? rowContent.rowCompName <> invalid : "ml_HorizontalRow"
      return m.createSGNode(compName, m.container, str(index).trim(), {
        renderState: "rendered"
        isRendered: true
        content: rowContent
        owner: m.owner
        'TODO - measure the heights.
        isInViewport: index < 5
      })
    end function

    override function updateLayout()
      y = 0
      w = m.owner.width

      for each comp in m.components
        settings = ml.listMixin.getRowSettings(m.content, comp.content)
        comp.visible = comp.content.isHidden <> true

        if comp.visible
          comp.translation = [0, y]

          'TODO better handle the whole visibility

          y += comp.height + settings.space
          ' ? ">>> SCREEN POS "; settings.screenPos
          m.rects.push({
            translation: comp.translation
            size: [w, comp.height]
            index: comp.index
            screenPos: settings.screenPos
          })
          m.visibleComponents.push(comp)
          m.visibleItems.push(comp.content)
        else
          m.hiddenComponents.push(comp)
        end if

      end for

    end function

    override function applyRenderStateMap(renderStateMap)
      ? "LIST updating renderStateMap: " ; formatJson(renderStateMap)
      for each id in renderStateMap
        comp = m.components[id.toInt()]

        if comp <> invalid and comp.renderState <> renderStateMap[id]
          comp.renderState = renderStateMap[id]
          if comp.renderState = "rendered"
            m.renderedComponents.push(comp)
          end if
          comp.isRendered = comp.renderState = "rendered"
        else
          ' ? "ERROR could not find visible comp for "; id
        end if
      end for

    end function

    override function getFocusSettings()
      return m.content.focusSettings
    end function

  end class
end namespace