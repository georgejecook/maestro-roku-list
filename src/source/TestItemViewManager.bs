import "pkg:/source/BaseClass.bs"

class TestItemViewManager extends ItemViewManager
  public itemSize = [100, 100]
  public space = 0

  function new(owner, container, axes, itemSize = [100, 100], space = 0)
    super("TestItemViewManager", owner, container, axes, 0, 1920)
    m.container = container
    m.owner = owner
    m.itemSize = itemSize
    m.space = space
  end function

  override function getRenderer(index)
    return m.visibleComponents[index]
  end function

  override function createRenderers(items)
    m.visibleComponents = []
    m.hiddenComponents = []
    m.components = []
    m.rects = []

    x = 0
    y = 0
    if m.content <> invalid
      index = 0
      for each item in m.content
        component = { 
          id: str(index).trim()
          content: item
          isrendered: false
          renderState: "none"
          visible: item.isHidden <> true
        }

        m.components.push(component)

        if component.visible
          component.translation = [x, y]

          'TODO better handle the whole visibility

          if m.axes = 0
            x += m.itemSize[0] + m.space
          else
            y += m.itemSize[1] + m.space
          end if

          m.rects.push({ translation: component.translation, size: m.itemSize })
          m.visibleComponents.push(component)
          m.visibleItems.push(component.content)
        else
          m.hiddenComponents.push(component)
        end if

        index++
      end for
    end if 
  end function
end class