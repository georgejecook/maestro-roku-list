import "pkg:/source/ListMixin.bs"
import "pkg:/source/ItemDelegateMixin.bs"
import "pkg:/source/RowItemScroller.bs"
import "pkg:/source/RowItemViewManager.bs"
import "pkg:/source/ItemFocusManager.bs"
import "pkg:/source/roku_modules/maestro/view/BaseView.brs"

namespace ml
  @node("ml_BaseRow", "mv_BaseView")
  class BaseRow extends mv.BaseView

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ content
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @observer("_onContentChange")
    public content as mc.types.Node
    private _currentContent

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ public control fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @observer("onAnimateToItemChange")
    public animateToItem = -1

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ private state
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public index = -1
    public renderState = "none"
    @observer("onIsRenderedChange")
    public isRendered = false
    public isInViewport = false
    public height = 0
    public width = 0

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ event delegation
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @observer("onListEvent")
    public listEvent as mc.types.Assocarray
    public owner as mc.types.Node

    protected isInitialized = false
    protected wasHidden = false
    protected wasFocusable = true
    protected settings
    'debug
    public _vs = "none"

    function new()
      super(m.top.subType())
      ml.itemDelegateMixin.setDelegate()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function initialize()
      super.initialize()
      m.createViews()
      m.isInitialized = true
      m._onContentChange()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function _onContentChange()
      m.log.info("onContentChange")
      if m.isInitialized
        if m._currentContent = invalid or not m._currentContent.isSameNode(m.content)
          m._currentContent = m.content
          m.settings = ml.listMixin.getRowSettings(m.owner.content, m.content)
          m.onContentChange(m._currentContent)
          m._calculateHeight()
        else if m._currentContent <> invalid
          isListRefreshNeeded = false
          if m.wasHidden <> m._currentContent.isHidden
            m.wasHidden = m._currentContent.isHidden
            isListRefreshNeeded = true
          end if
          if m.wasFocusable <> m._currentContent.isFocusEnabled
            m.wasFocusable = m._currentContent.isFocusEnabled
            isListRefreshNeeded = true
          end if

          if isListRefreshNeeded
            m.owner@.forceUpdate()
          end if
        end if

      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ public api
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function getRenderer(index as integer) as object
      'implement me
      return invalid
    end function

    public function getRect(index as integer, useScreenCoords = false as boolean) as object
      'implement me
      return invalid
    end function

    public function getScreenRect(index as integer, screenPos = invalid as integer, direction = 0 as integer) as object
      'implement me
      return invalid
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ private impl
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function _calculateHeight()
      height = m.calculateHeight()
      if height = -1
        height = m.settings.height
      end if
      m.height = height
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ abstract methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function createViews()
      'implement me
    end function

    protected function onContentchange(content as mc.types.node)
      'implement me
    end function

    protected function onIsRenderedChange()
      'implement me
    end function

    protected function onAnimateToItemChange(index as integer)
      'implement me
    end function

    protected function calculateHeight() as integer
      return -1
    end function

    protected function onListEvent(event as object)
    end function

  end class
end namespace