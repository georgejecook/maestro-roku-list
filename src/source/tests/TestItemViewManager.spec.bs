import "pkg:/source/BaseClass.bs"

namespace tests
  class TestItemViewManager extends ItemViewManager
    public itemSize = [100, 100]
    public space = 0

    function new(owner, container, axes, itemSize = [100, 100], space = 0)
      super("TestItemViewManager", owner, container, axes, 0, 1920)
      m.container = container
      m.owner = owner
      m.itemSize = itemSize
      m.space = space
      m.lookAheadDistance = 1500
      m.lookBehindDistance = 1500
    end function

    override function getRenderer(index)
      return m.visibleComponents[index]
    end function

    override function createRenderers(content)
      m.visibleComponents = []
      m.hiddenComponents = []
      m.components = []
      m.rects = []

      x = 0
      y = 0
      if content <> invalid
        index = 0
        for each item in content.getChildren(-1, 0)
          component = new tests.utils.MockNode(str(index).trim())
          component.append({
            index: index
            content: item
            isrendered: false
            renderState: "none"
            _vs: "none"
            isInViewport: false
            visible: item.isHidden <> true
          })

          m.components.push(component)

          if component.visible
            component.translation = [x, y]

            'TODO better handle the whole visibility

            if m.axes = 0
              x += m.itemSize[0] + m.space
            else
              y += m.itemSize[1] + m.space
            end if

            m.rects.push(
            {
              translation: component.translation
              size: m.itemSize
              index: index
            })
            m.visibleComponents.push(component)
            m.visibleItems.push(component.content)
          else
            m.hiddenComponents.push(component)
          end if

          index++
        end for
      end if
    end function

    override function _updateLayout()
      m.logInfo("_updateLayout")
      m.updateScreenRect()
      m.updateLayout()
    end function

    override function applyRenderStateMap(renderStateMap)
      ' ? "updating renderStateMap: " ; formatJson(renderStateMap)
      for each id in renderStateMap
        component = m.components[id.toInt()]

        if component <> invalid
          if component.renderState <> renderStateMap[id]
            component.renderState = renderStateMap[id]
            component.isRendered = component.renderState = "rendered"
          end if
          if component.isRendered
            m.renderedComponents.push(component)
          end if
        else
          ' ? "ERROR could not find visible component for "; id
        end if
      end for

    end function

    override function shouldUpdateRenderedIndexes(direction, index)
      return true
    end function

  end class

end namespace