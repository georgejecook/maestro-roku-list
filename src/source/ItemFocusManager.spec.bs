namespace tests

  @suite("ItemFocusManager tests")
  class ItemFocusManagerTests extends tests.BaseTestSuite

    public owner
    public container
    public viewManager
    public focusManager
    public scrollerAnimation
    public scrollerInterplator
    public scroller
    public animation
    public interpolator

    override function beforeEach()
      m.owner = new tests.utils.MockNode("owner")
      m.owner.translation = [0, 0]
      m.owner.width = 1920
      m.owner.height = 1080

      m.container = new tests.utils.MockNode("container")
      m.container.translation = [0, 0]
      m.container.width = 1920
      m.container.height = 1080

      m.viewManager = new TestItemViewManager(m.owner, m.container, 1)

      m.scrollerAnimation = new tests.utils.MockNode("animation")
      m.scrollerInterpolator = new tests.utils.MockNode("interpolator")
      m.focusManager = { "id": "focusManager" }

      m.scroller = new ItemScroller(m.viewManager, 1, m.scrollerAnimation, m.scrollerInterpolator, m.focusManager)
      m.configureScroller(1, 20)

      m.animation = new tests.utils.MockNode("animation")
      m.interpolator = new tests.utils.MockNode("interpolator")

      m.focusManager = new ItemFocusManager(m.viewManager, m.animation, m.interpolator, invalid)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests setFocusPosition")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("tests various values")
    @params(0, 100, 1, 200, 0)
    @params(3, 400, 5, 600, -1)
    function setFocusPosition(index, indexPosition, nextIndex, nextPosition, direction)
      m.focusManager.setFocusPosition(index, indexPosition, nextIndex, nextPosition, direction)

      m.assertEqual(m.focusManager.index, index)
      m.assertEqual(m.focusManager.indexPosition, indexPosition)
      m.assertEqual(m.focusManager.nextIndex, nextIndex)
      m.assertEqual(m.focusManager.nextPosition, nextPosition)
      m.assertEqual(m.focusManager.direction, direction)

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("tests onContainerPositionChange")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("tests various values")
    @params(1, 0, 0, 1, 100, 5, 0.05)
    @params(1, 0, 0, 1, 100, 50, 0.5)
    @params(1, 0, 0, 1, 100, 75, 0.75)
    @params(1, 1, 100, 2, 200, 105, 0.05)
    @params(1, 1, 100, 2, 200, 150, 0.5)
    @params(1, 1, 100, 2, 200, 175, 0.75)
    @params(-1, 2, 200, 1, 100, 195, 0.95)
    @params(-1, 2, 200, 1, 100, 150, 0.5)
    @params(-1, 2, 200, 1, 100, 125, 0.25)
    @params(-1, 1, 100, 0, 0, 95, 0.95)
    @params(-1, 1, 100, 0, 0, 50, 0.5)
    @params(-1, 1, 100, 0, 0, 25, 0.25)
    @params(1, 1, 100, 0, 0, 5, 0.95)
    function onContainerPositionChange(direction, index, indexPosition, nextIndex, nextPosition, offset, expected)

      m.focusManager.setFocusPosition(index, indexPosition, nextIndex, nextPosition, direction)

      m.expectOnce(m.focusManager, "onFocusUpdate", [expected * 1.0])

      m.focusManager.onContainerPositionChange(offset)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ utils
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function configureScroller(axes, numItems = 20, itemSize = [300, 300], screenSize = [1920, 1080])
      m.scroller.axes = axes

      tests.utils.configureViewManager(m.viewManager, axes, numItems, itemSize, screenSize)

      m.scroller.onViewManagerUpdate()
    end function


  end class
end namespace