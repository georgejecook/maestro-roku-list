import "pkg:/source/roku_modules/maestro/core/MIOC.brs"
import "pkg:/source/roku_modules/maestro/core/Tasks.brs"
import "pkg:/source/roku_modules/maestro/core/Utils.brs"

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Initialization
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function Init()
  mv.initializeFocusManager(m.global)
  tick = m.top.getScene().createChild("Timer")
  tick.duration = 0.01
  tick.repeat = true
  tick.control = "start"
  mc.setOrAddNodeField(m.global, "tick", tick)
  mc.tasks.observeNodeField(tick, "fire", onInfoChange, "none")
  mioc.setInstance("focusedIndex", {
    row: 0
    cell: 0
  })

  initFlyweight()
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ flyweight
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function initFlyweight()
  m.componentPool = createObject("roSGNode", "mc_ComponentPool")
  m.global.addFields({ "componentPool": m.componentPool })

  m.cellTracker = createObject("roSGNode", "mv_CellTracker")
  m.global.addFields({ "cellTracker": m.cellTracker })
  m.top.addFields({ "_global": m.global })

  m.infoLabel = m.top.findNode("infoLabel")

end function

function prebakeCells()
  ' m.componentPool@.addPreBakedCells(200, "ml_SimpleCell")
end function


'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ callbacks
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function onInfoChange()
  m.infoLabel.text = ` Cell Pressure - mList: ${m.componentPool.numberOfComponentsInUse} / ${m.componentPool.numberOfComponents} - sg ${m.cellTracker.numberOfCellsInUse} / ${m.cellTracker.numberOfCells}`
  focusedIndex = mioc.getInstance("focusedIndex")
  m.infoLabel.text += ` FOCUS: ${focusedIndex.row}, ${focusedIndex.cell}`
end function


'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ lifecycle
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function onFirstShow()
  m.log.info("onFirstShow")
  prebakeCells()
  screen = mc.createSGNode("ListScreen", m.top.findNode("contentGroup"), "listScreen")
  ' screen = mc.createSGNode("RowListScreen", m.top.findNode("contentGroup"), "listScreen")
  mv.setFocus(screen)
end function
