import "pkg:/source/ListMixin.bs"
import "pkg:/source/roku_modules/maestro/view/BaseScreen.brs"
import "pkg:/source/ListDelegateMixin.bs"
import "pkg:/source/roku_modules/maestro/core/DebugTimer.brs"

@node("ListScreen", "mv_BaseScreen")
class ListScreen extends mv.BaseScreen

  @observer("onRemoveItems")
  @alwaysnotify
  public removeItems = 0

  @observer("onShowItems")
  @alwaysnotify
  public showItems = 0

  @observer("onHideItems")
  @alwaysnotify
  public hideItems = 0

  @observer("onShowRows")
  @alwaysnotify
  public showRows = 0

  @observer("onHideRows")
  @alwaysnotify
  public hideRows = 0

  'views
  private list
  private listHolder
  private bgRect

  'style
  private numberOfRows = 20
  private defaultCellType = "ml_SimpleCell"

  'state
  public componentPool as mc.types.Node
  public cellTracker as mc.types.Node
  private contentId = 0
  private rowSettings
  private focusSettings
  private cellSettings
  private loadingIndicator

  private isSmall = false
  function new()
    super("ListScreen")
    if m.isSmall
      translation = [300, 300]
      size = [600, 500]
    else
      translation = [0, 0]
      size = [1920, 1080]
    end if

    m.bgRect = m.createSGNode("mv_Rectangle", m.top, "bgRect", {
      translation: translation
      size: size
      color: "#b286f0"
    })
    m.listHolder = m.createSGNode("Group", m.top, "listHolder")
    m.componentPool = m.global.componentPool
    m.cellTracker = m.global.cellTracker

    m.list = m.createSGNode("ml_List", m.listHolder, "list", {
      translation: translation
      width: size[0]
      height: size[1]
    })
    m.loadingIndicator = m.createSGNode("LoadingIndicator", m.top, "loadingIndicator", {
      isActive: true
      width: 1920
      height: 1080
      backgroundVisible: false
    })
    ml.delegateMixin.setListDelegate(m.list)
    m.onResetChange()
  end function

  private function onResetChange()
    m.list.content = invalid
    ' m.cellSettings = ml.listMixin.createCellSettings("ml_SimpleCell", [480, 50], 30)
    if m.isSmall
      m.cellSettings = ml.listMixin.createCellSettings("ml_SimpleCell", [80, 50], 30)
    else
      m.cellSettings = ml.listMixin.createCellSettings("ml_SimpleCell", [480, 320], 30)
    end if

    timer = new mc.utils.DebugTimer("list")
    m.rowSettings = ml.listMixin.createRowSettings(m.cellSettings, invalid, 30)
    m.rowSettings.contentOffset = [500, 0]
    m.focusSettings = ml.listMixin.createFocusSettings(0.05, 0.01)
    content = ml.listMixin.createListContent(m.createData(), m.focusSettings, m.rowSettings)
    timer.log("makeData")
    m.list.content = content
    timer.log("set content")
    m.loadingIndicator.isActive = false
  end function

  private function createData()
    content = []
    for i = 0 to m.numberOfRows - 1
      row = createObject("roSGNode", "ml_RowContent")
      if i = 0
        rowFocusSettings = ml.listMixin.createFocusSettings(0.02, 0.001)
      else if i = 1
        rowFocusSettings = ml.listMixin.createFocusSettings(0.03, 0.01)
      else
        rowFocusSettings = ml.listMixin.createFocusSettings(0.05, 0.01)
      end if
      if i = 0
        cellSettings = ml.listMixin.createCellSettings("HeroCell", [1100, 700], 200)
        cellSettings = ml.listMixin.createCellSettings("HeroCell", [1100, 700], 200)
        row.settings = ml.listMixin.createRowSettings(cellSettings, rowFocusSettings)
        row.settings.contentOffset = [400, 0]
      else if i = 1 or i = 4 or i = 8
        cellSettings = ml.listMixin.createCellSettings("SubHeroCell", [900, 320], 100)
        row.settings = ml.listMixin.createRowSettings(cellSettings, rowFocusSettings)
      else if i = 5 or i = 11
        focusSettings = ml.listMixin.createFocusSettings()
        focusSettings.focusFeedbackStyle = "none"
        row.settings = ml.listMixin.createRowSettings(invalid, focusSettings, 30, invalid, 0, "ComplexRow")
      else
        row.settings = ml.listMixin.createRowSettings(m.cellSettings, rowFocusSettings)
      end if
      row.title = "ROW " + str(i)
      content.push(row)
      if i <> 0
        if i = 1
          row.settings.screenPos = 710
        end if
        ' if i mod 9 = 0
        '   row.addFields({ "focusType": "fixed" })
        '   ' row.addFields({ "focusType": "floatingWrap" })
        '   row.title += " floating"
        ' else
        '   row.addFields({ "focusType": "fixed" })
        '   row.title += " fixed"
        ' end if

        ' if i = 1
        '   row.settings.screenPos = 100
        '   row.title += " 100"
        ' else if i mod 5 = 0
        '   row.settings.screenPos = 200
        '   row.title += " 200"
        ' else if i mod 5 = 3
        '   row.settings.screenPos = 400
        '   row.title += " 400"
        ' else if i mod 5 = 2
        '   row.settings.screenPos = 800
        '   row.title += " 800"
        ' else
        '   row.settings.screenPos = 0
        '   row.title += " 0"
        ' end if
      end if

      if i = 10 or i = 14 or i = 19 or i = 22 or i = 23 or i = 28
        cellType = "RectComp"
        row.addFields({
          "cellType": cellType
        })
      end if
      row.appendChildren(m.makeItems(m.defaultCellType, 20))
    end for
    return content
  end function

  private function onItemSelected()
    print "onItemSelected changed to: "; m.list.itemSelected
    newScreen = createObject("roSGNode", "ListScreen")
    m.push(newScreen)
    mv.setFocus(newScreen)
  end function

  private function itemUnfocused()
    print "itemUnfocused changed to: "; m.list.itemUnfocused
  end function

  private function currFocusItemIndex()
  end function

  private function addItems(cellType, number)
    row = m.list.content.getChild(focusedRow)
    row.appendChildren(m.makeItems(cellType, number))
  end function

  private function makeItems(cellType, number)
    d = createObject("roDateTime")
    nonce = str(d.asSeconds()).trim()
    items = []
    for i = 0 to number
      child = createObject("roSGNode", "ContentNode")
      child.id = str(m.contentId).trim()
      child.description = "some really long " + child.id + "text in here " + child.id
      ' child.HDGRIDPOSTERURL = "https://picsum.photos/id/" + str(230).trim() + "/360/300?n=" + nonce
      child.HDGRIDPOSTERURL = "https://picsum.photos/id/" + str(m.contentId mod 1000).trim() + "/340/340?n=" + nonce
      ' child.HDGRIDPOSTERURL = "https://p1.hiclipart.com/preview/484/533/90/random-movie-collection-folder-icon-part-3-2-guns-256x256-2-guns-movie-poster-art-png-clipart.jpg"
      child.title = `Item ${child.id} [${i}]`

      ' if m.contentId mod 5 = 0
      '   cellType = "SimpleCell"
      ' else if m.contentId mod 7 = 0
      '   cellType = "ComplexCell"
      ' end if

      ' child.addFields({
      '   "cellType": cellType
      ' })
      items.push(child)
      m.contentId++
    end for
    return items
  end function

  private function onRemoveItems(items)
    row = m.list.content.getChild(focusedRow)

    startIndex = row.getChildCount() - items
    children = row.getChildren(items, startIndex)
    row.removeChildren(children)

  end function

  private function toggleCellState(items, state)

    for each item in items
      if item <> invalid
        dynamicCell = m.cellTracker.callFunc("getCellForContentId", item.id)
        if dynamicCell <> invalid
          ' ? "setting viewstate on dynamic cell " ; dynamicCell.trackingId ; " content Id " ; item.id
          dynamicCell.viewState = state
        end if
      end if
    end for

  end function

  private function onHideRows(rows)
    for i = 0 to rows
      rowContent = m.list.content.getChild(i + m.list.rowFocused)
      if rowContent <> invalid
        rowContent.isHidden = true
      end if
    end for
    m.list@.forceUpdate()
  end function


  private function onShowRows(rows)
    for i = 0 to rows
      rowContent = m.list.content.getChild(i + m.list.rowFocused)
      if rowContent <> invalid
        rowContent.isHidden = false
      end if
    end for
    m.list@.forceUpdate()
  end function

  private function getRowItems(row, number)
    items = []
    for i = 0 to number
      items.push(row.getChild(i))
    end for

    return items
  end function

  private function onHideItems(items)
    for i = 0 to items
      dynamicCell = m.cellTracker.callFunc("getCellForContentId", str(i).trim())
      if dynamicCell <> invalid
        dynamicCell.viewState = "hidden"
      end if
    end for
  end function

  private function onShowItems(items)
    for i = 0 to items
      dynamicCell = m.cellTracker.callFunc("getCellForContentId", str(i).trim())
      if dynamicCell <> invalid
        dynamicCell.viewState = "show"
      end if
    end for
  end function


  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ keypresses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onKeyPressOption() as boolean
    ? "pressed option"
    return true
  end function

  private function onKeyPressFastForward() as boolean
    return true
  end function

  private function onKeyPressBack() as boolean
    if m.top.isRoot <> true
      m.list.isHidden = true
      m.pop()
    end if
    return true
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ lifecycle
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onShow()
    super.onShow()
    m.list.isHidden = false
    mv.setFocus(m.list)
  end function

  protected override function onHide()
    super.onHide()
    m.list.isHidden = true
  end function

  protected override function onGainedFocus(isSelfFocused)
    super.onGainedFocus(isSelfFocused)
    m.log.info("onGainedFocus", isSelfFocused)

    if isSelfFocused
      mv.setFocus(m.list)
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ list delegate
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  private function onCellWillGainFocus(rowIndex, itemIndex, direction)
    ' ? "+SCREEN onCellWillGainFocus : R: "; rowIndex ; " I: " ; itemIndex; " D:" ; direction
    mioc.setInstance("focusedIndex", {
      row: rowIndex
      cell: itemIndex
    })
  end function

  private function onCellDidGainFocus(rowIndex, itemIndex, direction)
    ' ? "+SCREEN onCellDidGainFocus : R: "; rowIndex ; " I: " ; itemIndex; " D:" ; direction
    mioc.setInstance("focusedIndex", {
      row: rowIndex
      cell: itemIndex
    })
  end function


  private function onCellDidLoseFocus(rowIndex, itemIndex, direction)
    ' ? "+SCREEN onCellDidLoseFocus : R: "; rowIndex ; " I: " ; itemIndex; " D:" ; direction
  end function

  private function onRowDidGainFocus(rowIndex, direction)
    ' ? "+SCREEN onRowDidGainFocus : R: "; rowIndex ; " D:" ; direction
    ' if direction = -1
    '   row = m.list@.getRowRenderer(rowIndex)
    '   row.opacity = 1
    ' end if
  end function

  private function onRowDidLoseFocus(rowIndex, direction)
    row = m.list@.getRowRenderer(rowIndex)
    ' if direction = 1
    '   row.opacity = 0
    ' end if

    ' ? "+SCREEN onRowDidLoseFocus : R: "; rowIndex ; " D:" ; direction
  end function

  private function onRowGainingFocus(rowIndex, direction, fraction)
    ' if direction = -1
    '   row = m.list@.getRowRenderer(rowIndex)
    '   row.opacity = fraction
    ' end if
    ' ? "+SCREEN onRowGainingFocus : R: "; rowIndex ; " D:" ; direction ; " F: " ; fraction
  end function

  private function onRowLosingFocus(rowIndex, direction, fraction)
    ' ? "+SCREEN onRowLosingFocus : R: "; rowIndex ; " D:" ; direction ; " F: " ; fraction
    ' if direction = 1
    '   row = m.list@.getRowRenderer(rowIndex)
    '   row.opacity = 1 - fraction
    ' end if

  end function

end class
