import "pkg:/source/ListMixin.bs"
import "pkg:/source/ItemDelegateMixin.bs"
import "pkg:/source/RowItemScroller.bs"
import "pkg:/source/RowItemViewManager.bs"
import "pkg:/source/ItemFocusManager.bs"
import "pkg:/source/roku_modules/maestro/view/BaseView.brs"

@node("ComplexRow", "mv_BaseView")
class ComplexRow extends mv.BaseView

  'public fields
  @observer("onContentChange")
  public content as mc.types.Node
  private _lastContent
  public index = -1
  public owner as mc.types.Node
  public listEvent as mc.types.Assocarray
  public renderState = "none"
  @observer("onIsRenderedChange")
  public isRendered = false
  public isInViewport = false
  @observer("onIsScrollingChange")
  public isScrolling = false
  public height = 700
  public width = 1920

  'managers and state
  private isInitialized = false
  private wasHidden = false
  private wasFocusable = true

  'debug
  public _vs = "none"

  private isButton1Focused = true

  'views
  private bgRect
  private contentGroup
  private videoPlayer
  private button1
  private button2

  function new()
    super("ml_HorizontalRow")
    ml.itemDelegateMixin.setDelegate()
  end function

  protected override function initialize()
    super.initialize()
    m.createViews()
    m.isInitialized = true
    m.onContentChange()
  end function

  private function createViews()
    m.bgRect = m.createSGNode("mv_Rectangle", m.top, "bgRect", {
      size: [1920, 1080]
      color: "#000000"
      opacity: 1
    })
    m.button1 = m.createSGNode("Button", m.top, "button1", {
      text: "Button 1"
      translation: [500, 300]
      width: 800
      height: 80
    })
    m.button2 = m.createSGNode("Button", m.top, "button2", {
      text: "Button 2"
      translation: [500, 400]
      width: 800
      height: 80
    })
  end function

  private function onContentChange()
    m.log.info("onContentChange")
    if m.isInitialized
      if (m._lastContent = invalid or not m._lastContent.isSameNode(m.content))
        m._lastContent = m.content
        if m.content <> invalid
          'configure stuff
        end if
        'TODO this stuff needs to go to a base row component
      else if m._lastContent <> invalid
        isListRefreshNeeded = false
        if m.wasHidden <> m._lastContent.isHidden
          m.wasHidden = m._lastContent.isHidden
          isListRefreshNeeded = true
        end if
        if m.wasFocusable <> m._lastContent.isFocusEnabled
          m.wasFocusable = m._lastContent.isFocusEnabled
          isListRefreshNeeded = true
        end if

        if isListRefreshNeeded
          m.owner@.forceUpdate()
        end if
      end if

    end if
  end function

  private function onIsRenderedChange()
    ' ? "onIsRenderedChange " ; m.isRendered
  end function

  private function onIsScrollingChange()
  end function

  public function getRenderer(index)
    return invalid
  end function

  public function getRect(index, useScreenCoords = false)
    return invalid
  end function

  public function getScreenRect(index, screenPos = invalid, direction = 0)
    return invalid
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ KeyPress
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onKeyPressUp() as boolean
    m.log.info("onKeyPressUp")
    if m.isButton1Focused
      return false
    else
      m.setFocus(m.button1)
      m.isButton1Focused = true
      return true
    end if
  end function

  private function onKeyPressDown() as boolean
    m.log.info("onKeyPressDown")
    if m.isButton1Focused
      m.setFocus(m.button2)
      m.isButton1Focused = false
      return true
    else
      return false
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ delegate
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ delegate
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onWillEnter(direction)
    ? "CR: onWillEnter " ; " " ; direction
  end function

  private function onWillExit(direction)
    ? "CR: onWillExit " ; " " ; direction
  end function

  private function onDidEnter(direction)
    ? "CR: onDidEnter " ; " " ; direction
  end function

  private function onDidExit(direction)
    ? "CR: onDidExit " ; " " ; direction
  end function

  private function onWillGainFocus(direction)
    ? "CR: onWillGainFocus " ; " " ; direction
  end function

  private function onWillLoseFocus(direction)
    ? "CR: onWillLoseFocus " ; " " ; direction
  end function

  private function onDidGainFocus(direction)
    ? "CR: onDidGainFocus " ; " " ; direction
    if direction = 1
      m.setFocus(m.button1)
    else
      m.setFocus(m.button2)
    end if
  end function

  private function onDidLoseFocus(direction)
    ? "CR: onDidLoseFocus " ; " " ; direction
  end function

  private function onGainingFocus(direction, fraction)
    ? "CR: onGainingFocus " ; " " ; direction ; " " ; fraction
  end function

  private function onLosingFocus(direction, fraction)
    ? "CR: onLosingFocus " ; " " ; direction ; " " ; fraction
  end function


  ' 'for gaining the focus again if list lost focus
  ' protected override function onDidGainFocus(isSelfFocused as boolean)
  '   super.onGainedFocus(isSelfFocused)
  '   if isSelfFocused
  '     if m.isButton1Focused
  '       m.setFocus(m.button1)
  '     else
  '       m.setFocus(m.button2)
  '     end if
  '   end if
  ' end function
end class